
<!DOCTYPE html>
<html lang="ja">
<head>
   <meta charset="utf-8">
   <title>D3 デモ: 軸</title>
   <script type="text/javascript" src="http://d3js.org/d3.v3.min.js""></script>
   <style type="text/css">

      .axis path,
      .axis line {
         fill: none;
         stroke: black;
         shape-rendering: crispEdges;
      }

      .axis text {
         font-family: sans-serif;
         font-size: 11px;
      }

   </style>
</head>
<body>
<script type="text/javascript">

   // 幅（ Width ）と高さ（ height ）
   var w = 500;
   var h = 300;
   var padding = 30;

   /*
    // 静的 dataset
    var dataset = [
    [5, 20], [480, 90], [250, 50], [100, 33], [330, 95],
    [410, 12], [475, 44], [25, 67], [85, 21], [220, 88],
    [600, 150]
    ];
    */

   // 動的ランダム dataset
   var dataset = [];  				// 空配列の初期化
   var numDataPoints = 50;				// 生成するデータ数
   var xRange = Math.random() * 1000;	// 生成する x の最大値
   var yRange = Math.random() * 1000;	// 生成する y の最大値
   for (var i = 0; i < numDataPoints; i++) {					// numDataPoints 回ループ
      var newNumber1 = Math.round(Math.random() * xRange);	// 新しいランダム整数
      var newNumber2 = Math.round(Math.random() * yRange);	// 新しいランダム整数
      dataset.push([newNumber1, newNumber2]);					// 生成した整数を配列に追加
   }

   // スケール関数の生成
   var xScale = d3.scale.linear()
         .domain([0, d3.max(dataset, function(d) { return d[0]; })])
         .range([padding, w - padding * 2]);

   var yScale = d3.scale.linear()
         .domain([0, d3.max(dataset, function(d) { return d[1]; })])
         .range([h - padding, padding]);

   var rScale = d3.scale.linear()
         .domain([0, d3.max(dataset, function(d) { return d[1]; })])
         .range([2, 5]);

   // X 軸の定義
   var xAxis = d3.svg.axis()
         .scale(xScale)
         .orient("bottom")
         .ticks(5);

   // Y 軸の定義
   var yAxis = d3.svg.axis()
         .scale(yScale)
         .orient("left")
         .ticks(5);

   // SVG 要素の生成
   var svg = d3.select("body")
         .append("svg")
         .attr("width", w)
         .attr("height", h);

   // 円の生成
   svg.selectAll("circle")
         .data(dataset)
         .enter()
         .append("circle")
         .attr("cx", function(d) {
            return xScale(d[0]);
         })
         .attr("cy", function(d) {
            return yScale(d[1]);
         })
         .attr("r", function(d) {
            return rScale(d[1]);
         });

   /*
    // ラベルの生成
    svg.selectAll("text")
    .data(dataset)
    .enter()
    .append("text")
    .text(function(d) {
    return d[0] + "," + d[1];
    })
    .attr("x", function(d) {
    return xScale(d[0]);
    })
    .attr("y", function(d) {
    return yScale(d[1]);
    })
    .attr("font-family", "sans-serif")
    .attr("font-size", "11px")
    .attr("fill", "red");
    */

   // X 軸の生成
   svg.append("g")
         .attr("class", "axis")
         .attr("transform", "translate(0," + (h - padding) + ")")
         .call(xAxis);

   // Y 軸の生成
   svg.append("g")
         .attr("class", "axis")
         .attr("transform", "translate(" + padding + ",0)")
         .call(yAxis);

</script>
</body>
</html>
